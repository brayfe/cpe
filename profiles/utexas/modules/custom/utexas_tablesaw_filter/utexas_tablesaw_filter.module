<?php
/**
 * @file
 * Makes WYSIWYG tables responsive, when filter is enabled for the field.
 */

/**
 * System variable to toggle responsives tables on Drupal Views.
 */
define('UTEXAS_TABLESAW_FILTER_VIEWS', 'utexas_tablesaw_filter_views');

/**
 * System variable to apply table-layout:fixed to all tables.
 */
define('UTEXAS_TABLESAW_FILTER_FIXED', 'utexas_tablesaw_filter_fixed');

/**
 * Path to module configuration.
 */
define('UTEXAS_TABLESAW_FILTER_ADMIN_PATH', 'admin/config/content/utexas_tablesaw_filter');

/**
 * Implements hook_menu().
 *
 * Defines the menu routing for the administration path.
 */
function utexas_tablesaw_filter_menu() {
  return array(
    UTEXAS_TABLESAW_FILTER_ADMIN_PATH => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('utexas_tablesaw_filter_admin_form'),
      'access arguments' => array(UTEXAS_ADMIN_ADMINISTER_UTEXAS_SETTINGS),
      'title' => 'Responsive Tables',
      'description' => 'Configure which tables should be responsive',
    ),
  );
}

/**
 * Form callback to control module settings.
 *
 * Allows on/off for responsiveness on Drupal Views.
 */
function utexas_tablesaw_filter_admin_form($form, &$form_state) {

  $form['introductory_text'] = array(
    '#markup' => '<p>' . t('Enable responsive tables in WYSIWYG fields by going to !text_formats and checking "Make tables responsive" for the desired text format(s).', array('!text_formats' => l(t('Text Formats'), '/admin/config/content/formats'))) . '</p><hr />',
  );

  // Add a checkbox to indicate if GTM should be included on admin paths.
  $form[UTEXAS_TABLESAW_FILTER_VIEWS] = array(
    '#type' => 'checkbox',
    '#title' => t('Make Drupal Views responsive'),
    '#description' => t('When checked, CSS classes will be added to Drupal Views to make them mobile-responsive.'),
    '#default_value' => variable_get(UTEXAS_TABLESAW_FILTER_VIEWS, TRUE),
  );

  // Toggle table-layout:fixed CSS property.
  $form[UTEXAS_TABLESAW_FILTER_FIXED] = array(
    '#type' => 'checkbox',
    '#title' => t('Apply "table-layout:fixed" CSS property.'),
    '#description' => t('This may improve cell spacing and potential overlap in certain scenarios.
      Checking this box applies this property globally. To apply it to individual WYSIWYG tables,
      set your table markup to @code_example.', array('@code_example' => '<table class="fixed">')),
    '#default_value' => variable_get(UTEXAS_TABLESAW_FILTER_FIXED, FALSE),
  );

  // Use the system_settings_form() to add submit handlers to the button.
  return system_settings_form($form);
}

/**
 * Implements hook_init().
 */
function utexas_tablesaw_filter_init() {
  // If CSS/JS aggregation is on, add tablesaw on every page for aggregration.
  // If aggregation is off, responsive_tables_filter_preprocess_page()
  // conditionally adds it on a per-page basis.
  if (variable_get('preprocess_css', 0) == 1 && variable_get('preprocess_js', 0) == 1) {
    _responsive_tables_filter_add_js_css(TRUE);
  }
}

/**
 * Implements hook_filter_info().
 */
function utexas_tablesaw_filter_filter_info() {
  $filters = array();
  $filters['tablesaw'] = array(
    'title' => t('Make tables responsive'),
    'process callback' => '_tablesaw_filter',
  );
  return $filters;
}

/**
 * Filter callback for tablesaw filter.
 */
function _tablesaw_filter($text, $filter, $format, $langcode, $cache, $cache_id) {
  if ($text != '') {
    $tables = array();
    libxml_use_internal_errors(TRUE);
    $dom = new DOMDocument();
    $dom->loadHTML(mb_convert_encoding($text, 'HTML-ENTITIES', 'UTF-8'));
    // Retrieve user-defined tables defined by xpath, or default to table tag.
    $query = variable_get('responsive_tables_filter_table_xpath', FALSE);
    if ($query) {
      $xpath = new DOMXPath($dom);
      $tables = $xpath->query($query);
    }
    else {
      $tables = $dom->getElementsByTagName('table');
    }
    // Check if the text contains <table> tags.
    if ($tables->length !== 0) {
      // Find all tables in text.
      foreach ($tables as $table) {
        // Find existing class attributes, if any, and append tablesaw class.
        $existing_classes = $table->getAttribute('class');
        $new_classes = !empty($existing_classes) ? $existing_classes . ' tablesaw tablesaw-stack' : 'tablesaw tablesaw-stack';
        $table->setAttribute('class', $new_classes);

        // Force data-tablesaw-mode attribute to be "stack".
        $table->setAttribute('data-tablesaw-mode', 'stack');
      }
      return $dom->saveHTML();
    }
  }
  return $text;
}

/**
 * Implements hook_preprocess_page().
 *
 * Adds tablesaw JS when tables present and CSS/JS aggregation is off.
 */
function utexas_tablesaw_filter_preprocess_page(&$variables) {
  if (isset($variables['node']) && (variable_get('preprocess_css', 0) == 0 || variable_get('preprocess_js', 0) == 0)) {
    $formats_with_tablesaw = array();
    // Get text formats that have "tablesaw filter" enabled.
    $result = db_query('SELECT n.format FROM {filter} n WHERE n.module = :module AND n.status = 1', array(':module' => 'utexas_tablesaw_filter'));
    foreach ($result as $record) {
      $formats_with_tablesaw[] = $record->format;
    }
    array_unique($formats_with_tablesaw);
    $node = $variables['node'];
    $field_info = field_info_instances('node', $node->type);
    $lang = $node->language;
    $fields = array_keys($field_info);
    foreach ($fields as $field) {
      $f = $field;
      // Add the required JS only if the following 3 conditions are met:
      // (1) The field must have a text format value
      // (2) The field format must have tablesaw filter enabled
      // (3) The field value must contain '<table'.
      if (isset($node->{$f}[$lang][0]['format']) && in_array($node->{$f}[$lang][0]['format'], $formats_with_tablesaw) && preg_match('/<table/', $node->{$f}[$lang][0]['value'])) {
        _responsive_tables_filter_add_js_css(FALSE);
        // Quit searching once a field matching the criteria is found.
        break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_views_view_table().
 *
 * Adds tablesaw JS when tables present and CSS/JS aggregation is off to table.
 */
function utexas_tablesaw_filter_preprocess_views_view_table(&$variables) {
  // Check if this has been enabled in the config page.
  if (variable_get(UTEXAS_TABLESAW_FILTER_VIEWS, TRUE)) {
    // Add tablesaw classes & attribute.
    $variables['classes_array'][] = 'tablesaw';
    $variables['classes_array'][] = 'tablesaw-stack';
    $variables['attributes_array']['data-tablesaw-mode'] = 'stack';
    // Add the required Tablesaw library if aggregation is disabled.
    // it will already be added via utexas_tablesaw_filter_init().
    if (variable_get('preprocess_css', 0) == 0 || variable_get('preprocess_js', 0) == 0) {
      _responsive_tables_filter_add_js_css(TRUE);
    }
  }
}

/**
 * Add Tablesaw JS and CSS.
 *
 * @param bool $every_page
 *   Whether or not the JS and CSS should be added to every page.
 */
function _responsive_tables_filter_add_js_css($every_page) {
  $tablesaw_path = libraries_get_path('tablesaw');
  if (file_exists($tablesaw_path . '/dist/stackonly/tablesaw.stackonly.js') and file_exists($tablesaw_path . '/dist/stackonly/tablesaw.stackonly.css')) {
    drupal_add_js($tablesaw_path . '/dist/stackonly/tablesaw.stackonly.js', array(
      'every_page' => $every_page,
      'scope' => 'foot_scripts',
      'weight' => 10,
      )
    );
    $module_path = drupal_get_path('module', 'utexas_tablesaw_filter');
    drupal_add_css($module_path . '/theme/utexas_tablesaw_filter.css', array('every_page' => $every_page));
    drupal_add_css($tablesaw_path . '/dist/stackonly/tablesaw.stackonly.css', array('every_page' => $every_page));
    if (file_exists($tablesaw_path . '/dist/tablesaw-init.js')) {
      // Tablesaw 2.x includes tablesaw-init.js
      drupal_add_js($tablesaw_path . '/dist/tablesaw-init.js', array(
        'every_page' => $every_page,
        'scope' => 'foot_scripts',
        'weight' => 10,
        )
      );
    }
    if (variable_get(UTEXAS_TABLESAW_FILTER_FIXED, FALSE)) {
      // Add table-layout:fixed to tables if user has enabled on config page.
      drupal_add_css('@media (min-width: 40em) {table.tablesaw {table-layout: fixed;}}', array('type' => 'inline'));
    }
  }
  else {
    global $user;
    if (is_array($user->roles) && in_array('administrator', $user->roles) or $user->uid == '1') {
      drupal_set_message(
        t('The tablesaw filter is enabled, but its library could not be found. See !readme', array(
          '!readme' => l(t('README.txt'), $module_path . '/README.txt'),
        )),
        'warning');
    }
  }
}
