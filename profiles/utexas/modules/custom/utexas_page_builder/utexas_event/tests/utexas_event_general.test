<?php

/**
 * Tests the functionality of the Utexas Events module.
 */
class UtexasEventTestCase extends DrupalWebTestCase {
  protected $privileged_user;
  protected $profile = 'utexas';

  public static function getInfo() {
    return array(
      'name' => 'UTexas Event',
      'description' => 'Ensure Events functionality works properly',
      'group' => 'UTexas',
    );
  }

  public function setUp() {
    // Enable any modules required for the test. No user is needed to execute
    // the existing tests.
   parent::setUp(array('utexas_page_builder', 'utexas_event', 'token'));
  }

  /**
   * Test the _utexas_event_get_combined_time() function.
   */
  public function testUTexasEventCombineDates() {
    $now = 1460142240;
    $day = date(UTEXAS_EVENT_DAY_DISPLAY, $now);
    $time = date(UTEXAS_EVENT_TIME_DISPLAY, $now);
    $result = _utexas_event_get_combined_time($day, $time);
    // The result from the function should match the $now timestamp.
    $test = $now == $result;
    $message = format_string('Date %day and time %time fields combined (%result) match %timestamp .', array('%day' => $day, '%time' => $time, '%result' => $result, '%timestamp' => $now));
    $this->assertTrue($test, $message);
  }

  /**
   * Test the utexas_brand_guidelines_date_format() function.
   */
  public function testUTexasEventBrandGuidlinesDays() {
    $scenarios = array();
    $scenarios[] = array(
      'start' => 1460142240,
      'end' => 1460142240,
      'expected' => 'Friday April 8',
    );
    $scenarios[] = array(
      'start' => 1460142000,
      'end' => 1460746800,
      'expected' => 'April 8 15',
    );
    $scenarios[] = array(
      'start' => 1460142000,
      'end' => 1462734000,
      'expected' => 'April 8May 8',
    );
    $scenarios[] = array(
      'start' => 1483038000,
      'end' => 1483383600,
      'expected' => 'Dec. 29, 2016Jan. 2, 2017',
    );
    foreach ($scenarios as $scenario) {
      // Send timestamps to the date generation function.
      $dates_array = utexas_brand_guidelines_date_format($scenario, 'utexas_days');
      $end_result = isset($dates_array['end']) ? $dates_array['end'] : '';
      $result = $dates_array['start'] . $end_result;
      $test = $result == $scenario['expected'];
      $message = format_string('Span %start and %end render as %expected : %result .', array('%start' => date('F j Y', $scenario['start']), '%end' => date('F j Y', $scenario['end']), '%expected' => $scenario['expected'], '%result' => $result));
      $this->assertTrue($test, $message);
    }
  }

  /**
   * Test the utexas_brand_guidelines_date_format() function.
   */
  public function testUTexasEventBrandGuidlinesTimes() {
    $scenarios = array();
    // Add 5 hours from UTC time to get America/Chicago timezone (default).
    $scenarios[] = array(
      'start' => 1460151000 + 60 * 60 * 5,
      'end' => 1460151000 + 60 * 60 * 5,
      'expected' => '9:30 p.m. ',
    );
    $scenarios[] = array(
      'start' => 1460151000 + 60 * 60 * 5,
      'end' => 1460154600 + 60 * 60 * 5,
      'expected' => '9:30   to 10:30 p.m.',
    );
    $scenarios[] = array(
      'start' => 1460149200 + 60 * 60 * 5,
      'end' => 1460151000 + 60 * 60 * 5,
      'expected' => '9   to 9:30 p.m.',
    );
    $scenarios[] = array(
      'start' => 1460116800 + 60 * 60 * 5,
      'end' => 1460160000 + 60 * 60 * 5,
      'expected' => 'Noon to Midnight',
    );
    $scenarios[] = array(
      'start' => 1460113200 + 60 * 60 * 5,
      'end' => 1460206800 + 60 * 60 * 5,
      'expected' => '11 a.m.  to 1 p.m.',
    );
    foreach ($scenarios as $scenario) {
      // Send times to the time generation function.
      $dates_array = utexas_brand_guidelines_date_format($scenario, 'utexas_times');
      $end_result = isset($dates_array['end']) ? $dates_array['end'] : '';
      $result = $dates_array['start'] . $end_result;
      $test = $result == $scenario['expected'];
      $message = format_string('Span %start and %end render as %expected : %result', array('%start' => date('g:i a', $scenario['start']), '%end' => date('g:i a', $scenario['end']), '%expected' => $scenario['expected'], '%result' => $result));
      $this->assertTrue($test, $message);
    }
  }

  /**
   * Test the UtexasEventICal class methods.
   */
  public function testUTexasEventICal() {
    $event = new stdClass();
    $event->id = 1;
    $event->start = 1460149200 + 60 * 60 * 5;
    $event->end = 1460151000 + 60 * 60 * 5;
    $event->title = 'Woodstock';
    $event->summary_text = '3 Days of Peace, Love, and Music.';

    // We can't test the entirety of the iCal file, as it includes a now()
    // timestamp that would differ, and Simpletest does not set the site name.
    // Therefore, we search for only the strings we can expect.
    $expected = array(
      'LOCATION:Unspecified DESCRIPTION:3 Days of Peace, Love, and Music.',
      'DTEND:20160408T213000',
      'DTSTART:20160408T210000',
      'SUMMARY:Woodstock',
    );

    $ical = new UtexasEventICal($event);
    $export = $ical->export();
    $test = TRUE;
    foreach ($expected as $line)
    $pos = strpos($export, $line);
    if ($pos === FALSE) {
      $test = FALSE;
    }
    $message = format_string('iCal results: %export', array('%export' => $export));
    $this->assertTrue($test, $message);
  }

  /**
   * Test the UtexasEventICal class methods.
   */
  public function testUTexasEventGoogleCalendar() {
    $event = new stdClass();
    $event->id = 1;
    $event->start = 1460149200 + 60 * 60 * 5;
    $event->end = 1460151000 + 60 * 60 * 5;
    $event->title = 'Woodstock';
    $event->summary_text = '3 Days of Peace, Love, and Music.';
    $expected = '<a href="http://www.google.com/calendar/event?action=TEMPLATE&amp;dates=20160408T210000/20160408T213000&amp;text=Woodstock&amp;location=Unspecified&amp;details=3 Days of Peace, Love, and Music." class="export" target="_blank">Add to Google Calendar</a>';
    $link = _utexas_event_get_google_calendar_link($event);
    $test = $link == $expected;
    $message = format_string('Google Calendar link: %link', array('%link' => $link));
    $this->assertTrue($test, $message);
  }
}
